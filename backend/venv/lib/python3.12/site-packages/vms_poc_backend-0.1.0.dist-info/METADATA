Metadata-Version: 2.3
Name: vms-poc-backend
Version: 0.1.0
Summary: Backend service for AI-based VMS (Video Management System) with ONVIF PTZ camera control and streaming features.
License: MIT
Keywords: vms,onvif,ptz,camera,fastapi,iot,streaming
Author: Yash Joshi
Author-email: yash.joshi@eminds.ai
Requires-Python: >=3.10
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: fastapi (>=0.115.12,<0.116.0)
Requires-Dist: onvif-zeep (>=0.2.12,<0.3.0)
Requires-Dist: opencv-python (>=4.11.0.86,<5.0.0.0)
Requires-Dist: pydantic (>=2.11.5,<3.0.0)
Requires-Dist: pydantic-settings (>=2.9.1,<3.0.0)
Requires-Dist: uvicorn (>=0.34.2,<0.35.0)
Description-Content-Type: text/markdown

# VMS PoC Backend

This is the backend service for the AI-based **Video Management System (VMS)** Proof of Concept. It supports:

-   ONVIF-compatible IP camera integration
-   PTZ (Pan-Tilt-Zoom) controls
-   Camera presets (set, go to, list)
-   Live video streaming
-   REST API via FastAPI

---

## Features

-   Control ONVIF PTZ Cameras
-   Set and Go to Presets
-   RTSP Streaming (planned for integration with frontend)
-   Built with FastAPI for clean, modern REST APIs

---

## Project Structure

vms-poc-backend/
├── src/
│ |── app/ # Main FastAPI application
| │ ├── api/ # API routers
| | ├── config # Configuration
| │ ├── schemas/ # Schemas
| │ ├── services/ # ONVIF & PTZ logic
│ └── main.py # Entry point
├── pyproject.toml # Poetry config & dependencies
├── README.md # Project overview
|── run.py # Uvicorn Server

## Getting Started

### Prerequisites

-   Python 3.10+
-   [Poetry](https://python-poetry.org/docs/#installation)

### Install Dependencies

```bash
poetry install
```

## Run the Development Server

```bash
poetry run uvicorn app.main:app --reload


```

-   The server will be available at: http://localhost:8000

## Explore the API

-   FastAPI Swagger UI:

```bash
http://localhost:8000/docs
```

